name: 'Archive-stg'

on:
  push:
    branches-ignore:
      - '**'
    tags:
      - 'deploy-archive-stg'

defaults:
  run:
    shell: 'bash'

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: 'us-east-1'
  AWS_DEFAULT_REGION: 'us-east-1'
  AWS_ECR_REGISTRY_ID: '222484291001'
  WORKSPACE: 'stg'

jobs:
  hubzone_webmap:
    runs-on: 'ubuntu-latest'
    environment: "stg"
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v3'

      - name: 'Connecting to AWS using OIDC'
        uses: 'aws-actions/configure-aws-credentials@v2'
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v1
        id: ecr-login
        with:
          registries: ${{ env.AWS_ECR_REGISTRY_ID}}

      - name: ECR Build & Push
        uses: ./.github/actions/ecr
        with:
          registry: ${{ steps.ecr-login.outputs.registry }}
          repo: hubzone-webmap-archive
          # Tagging with ref_name (develop) and sha so we can leverage the sha and not initiate a force deployment
          # from Terraform
          tags: ${{ github.ref_name }} ${{ github.sha }}
          cache-from: ${{ github.ref_name }}

      - name: 'Install Terraform 1.0.9'
        uses: 'hashicorp/setup-terraform@v2'
        with:
          terraform_version: '1.0.9'

      - name: 'Deploying Service'
        run: |
            cd terraform/archive
            terraform init
            terraform workspace select ${{ env.WORKSPACE }}
            terraform plan -input=false -out=${{ env.WORKSPACE }}.tfplan
            terraform apply -input=false ${{ env.WORKSPACE }}.tfplan

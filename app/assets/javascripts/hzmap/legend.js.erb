// legend utilties
HZApp.Legend = (function(){
  return {
    legend: {
      'qct': {
        title: "Census Tract",
        svg: [],
        canToggle: true
      },
      'qnmc': {
        title: "County",
        svg: [],
        canToggle: true
      },
      'indian_lands': {
        title: "Indian Land",
        svg: [],
        canToggle: true
      },
      'redesignated': {
        title: "Redesignated",
        svg: [],
        canToggle: false
      },
      'brac': {
        title: "Base Closure Area",
        svg: [],
        canToggle: false
      },
      'brac_base': {
        title: "Closed Base",
        svg: [],
        canToggle: false
      }
    },
    buildLegend: function(layers){
      Object.keys(layers).map(function(layer){
        var legendConfig = HZApp.Legend.getConfigFromLayerStyle(layers[layer]);
        HZApp.Legend.legend[legendConfig.legendType].svg.push(HZApp.Legend.svgFromStyle(legendConfig));
      });

      Object.keys(this.legend).map(HZApp.Legend.insertLegendItem);

      this.addLegendButtonListeners();

      this.setLegendState(window.innerWidth);

    },
    addLegendButtonListeners: function(){
      $('#hide-legend-button').click(this.hideLegend);
      $('#show-legend-button').click(this.showLegend);
    },
    getConfigFromLayerStyle: function(layer){
      return {
        legendType: layer.legendType,
        styleType: layer.styleOptions[0].type,
        styleColor: layer.styleOptions[0][HZApp.Legend.legendTypeToColorType[layer.styleOptions[0].type]]
      };
    },
    svgFromStyle: function(style){
      var width = 25, height = 25;
      var svg = this.svgHeader(width, height);
      svg += '<title>HUBZone Legend - ' + style.styleType + '</title>';
      var svg_fn_name = "svg_" + style.styleType;
      svg += HZApp.Legend[svg_fn_name](style,width, height);
      svg += '</svg>';
      return svg;
    },
    svgHeader: function(width, height){
      return ('<svg width="' + width + 'px" height="' + height + 'px" viewBox="0 0 ' + (width + 5) + ' ' + height + '" ' +
              'version="1.1" xmlns="http://www.w3.org/2000/svg" ' +
              'xmlns:xlink="http://www.w3.org/1999/xlink">'
      );
    },
    svg_polygon: function(style, width, height){
      return ( '<g fill="' + style.styleColor + '">' +
               '<rect width="' + width + '" height="' + height + '"></rect>' +
               '</g>'
      );
    },
    svg_horline: function(style, width, height){
      return ('<defs><rect id="path-1" x="0" y="0" width="' + width + '" height="' + height +'"></rect></defs>' +
              '<g stroke="'+ style.styleColor + '" stroke-width="1" fill="none" fill-rule="evenodd">' +
                '<mask id="mask-2" fill="white"><use xlink:href="#path-1"></use></mask>' +
                '<use fill="#FFFFFF" xlink:href="#path-1"></use>' +
                '<path d="M22.5,-5.5 L-5.5,31.5" id="Line" stroke="' + style.styleColor + '" stroke-width="6" stroke-linecap="square" mask="url(#mask-2)"></path>' +
                '<path d="M45,-7 L9.5,39.5" id="Line-Copy" stroke="' + style.styleColor + '" stroke-width="6" stroke-linecap="square" mask="url(#mask-2)"></path>' +
                '<path d="M63,0 L27.5,46.5" id="Line-Copy-2" stroke="' + style.styleColor + '" stroke-width="6" stroke-linecap="square" mask="url(#mask-2)"></path>' +
                '<path d="M79,9 L43.5,55.5" id="Line-Copy-3" stroke="' + style.styleColor + '" stroke-width="6" stroke-linecap="square" mask="url(#mask-2)"></path>' +
              '</g>'
      );
    },
    svg_circle: function(style, width, height){
      return ('<defs><rect id="path-2" x="0" y="0" width="' + width + '" height="' + height +'"></rect></defs>' +
              '<g stroke="'+ style.styleColor + '" stroke-width="1" fill="none" fill-rule="evenodd">' +
                '<mask id="mask-2" fill="white"><use xlink:href="#path-1"></use></mask>' +
                '<use fill="#FFFFFF" xlink:href="#path-2"></use>' +
                '<ellipse fill="' + style.styleColor +'" mask="url(#mask-2)" cx="12" cy="0" rx="5" ry="5"></ellipse>' +
                '<ellipse fill="' + style.styleColor +'" mask="url(#mask-2)" cx="12" cy="28" rx="5" ry="5"></ellipse>' +
                '<circle fill="' + style.styleColor +'" mask="url(#mask-2)" cx="33" cy="0" r="5"></circle>' +
                '<circle fill="' + style.styleColor +'" mask="url(#mask-2)" cx="33" cy="28" r="5"></circle>' +
                '<circle fill="' + style.styleColor +'" mask="url(#mask-2)" cx="54" cy="0" r="5"></circle>' +
                '<circle fill="' + style.styleColor +'" mask="url(#mask-2)" cx="54" cy="28" r="5"></circle>' +
                '<ellipse fill="' + style.styleColor +'" mask="url(#mask-2)" cx="22" cy="15" rx="5" ry="5"></ellipse>' +
                '<ellipse fill="' + style.styleColor +'" mask="url(#mask-2)" cx="22" cy="43" rx="5" ry="5"></ellipse>' +
                '<ellipse fill="' + style.styleColor +'" mask="url(#mask-2)" cx="1" cy="15" rx="5" ry="5"></ellipse>' +
                '<ellipse fill="' + style.styleColor +'" mask="url(#mask-2)" cx="1" cy="43" rx="5" ry="5"></ellipse>' +
                '<ellipse fill="' + style.styleColor +'" mask="url(#mask-2)" cx="44" cy="15" rx="5" ry="5"></ellipse>' +
                '<ellipse fill="' + style.styleColor +'" mask="url(#mask-2)" cx="44" cy="43" rx="5" ry="5"></ellipse>' +
                '<circle fill="' + style.styleColor +'" mask="url(#mask-2)" cx="65" cy="15" r="5"></circle>' +
                '<circle fill="' + style.styleColor +'" mask="url(#mask-2)" cx="65" cy="43" r="5"></circle>' +
              '</g>'
      );
    },
    insertLegendItem: function(legendItem) {
      HZApp.Legend.legend[legendItem].canToggle ? HZApp.Legend.insertLegendItemToggle(legendItem) : HZApp.Legend.insertLegendItemNoToggle(legendItem);
    },
    insertLegendItemToggle: function(legendItem){
      var li = '<li id="legend-' + legendItem + '"' + 'class="legend-item">';
      li += "<input id='truth' type='checkbox' name=" + legendItem + " value='truth' checked>";
      li += '<label for=' + legendItem + '>';
      HZApp.Legend.legend[legendItem].svg.map(function(svg){ li += svg; });
      li += '<span>' + I18n.t('legend.' + legendItem) + '</span>';
      li += '</label>';
      li += '</li>';
      $('#legend > ul').append(li);
    },
    insertLegendItemNoToggle: function(legendItem){
      var li = '<li id="legend-' + legendItem + '"' + 'class="legend-item no-toggle">';
      HZApp.Legend.legend[legendItem].svg.map(function(svg){ li += svg; });
      li += '<span>' + I18n.t('legend.' + legendItem) + '</span>';
      li += '</li>';
      $('#legend > ul').append(li);
    },
    legendTypeToColorType: { //mapping style type to css/svg color parameter
      'polygon': 'fillColor',
      'circle': 'circleFillColor',
      'horline': 'lineStrokeColor'
    },
    hideLegend: function(){
      $('#legend li.legend-item').hide();
      $('#hide-legend-button').hide();
      $('#legend-header-title-expanded').hide();
      $('#legend-header-title-hidden').show();
      $('#show-legend-button').show();
    },
    showLegend: function(){
      $('#legend li.legend-item').show();
      $('#hide-legend-button').show();
      $('#legend-header-title-expanded').show();
      $('#legend-header-title-hidden').hide();
      $('#show-legend-button').hide();
    },
    setLegendState: function(windowWidth) {
      if (windowWidth > 950) {
        HZApp.Legend.showLegend();
      } else {
        HZApp.Legend.hideLegend();
      }
    }
  };
})();

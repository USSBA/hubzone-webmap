HZApp.MapUtils = (function(){

  return {
    // catch a map latlng event into a latlng hash
    catchMapClick: function(clickEvent){
      var clicklng = clickEvent.latLng.lng();
      var clicklat = clickEvent.latLng.lat();
      return this.sendMapClick({lat: clicklat, lng: clicklng});
    },

    // send a map click to the hubzone assertion server
    sendMapClick: function(latlng, callback){
      // Log the click
      var latlng_s = latlng.lat.toFixed(6) + ',' + latlng.lng.toFixed(6);
      HZApp.GA.track( 'map', 'click', latlng_s );
      var url = "<%= search_path %>?latlng=" + latlng_s + this.includeDateAndLocale();
      this.sendAjax(url, callback);
      HZApp.Router.clearHash('q');
      HZApp.Router.setSingleHash('latlng', latlng_s);
      HZApp.Router.setCenterAndZoomHash(HZApp.map.getCenter(), HZApp.map.getZoom());
      return url;
    },

    sendMapSearch: function(q, callback){
      var url = "<%= search_path %>?search=" + q + this.includeDateAndLocale();
      this.sendAjax(url, callback);
      return url;
    },

    sendAjax: function(url, callback){
      callback = callback || null;
      $.ajax({
        url: url,
        success: callback
      });
    },

    includeDateAndLocale: function(){
      var date = HZApp.MapUtils.parseDate(new Date());
      var locale = document.documentElement.lang || 'en';
      return ('&query_date=' + date + '&locale=' + locale);
    },

    //helper to parse a javascript date because, why?
    parseDate: function(date){
      var mm = date.getMonth() + 1;
      var dd = date.getDate();
      return [date.getFullYear(),
              (mm>9 ? '' : '0') + mm,
              (dd>9 ? '' : '0') + dd
             ].join('-');
    },

    //jump to location on the map based on the geocode viewport object
    jumpToLocation: function(geocodeLocation){
      if (geocodeLocation.viewport){
        var customFit = this.getBoundsZoomLevel(geocodeLocation.viewport, this.getMapDims($('#map')));
        if (customFit.fitZoom < 15){
          var newBounds = this.createGoogleLatLngBounds(
                            geocodeLocation.viewport.southwest.lng,
                            geocodeLocation.viewport.southwest.lat,
                            geocodeLocation.viewport.northeast.lng,
                            geocodeLocation.viewport.northeast.lat
            );
          HZApp.map.fitBounds(newBounds);
        } else {
          this.panAndZoom(customFit.center, 15);
        }
      }
    },

    getMapDims: function($el){
      return {
        height: $el.height(),
        width: $el.width()
      };
    },
    panAndZoom: function(center, zoom){
      HZApp.map.setZoom(zoom);
      HZApp.map.setCenter(center);
    },
    getBoundsZoomLevel: function(viewport, mapDims) {
      var WORLD_DIM = { height: 256, width: 256 };
      var ZOOM_MAX = 21;

      function latRad(lat) {
          var sin = Math.sin(lat * Math.PI / 180);
          var radX2 = Math.log((1 + sin) / (1 - sin)) / 2;
          return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;
      }

      function zoom(mapPx, worldPx, fraction) {
          return Math.floor(Math.log(mapPx / worldPx / fraction) / Math.LN2);
      }
      var ne = viewport.northeast;
      var sw = viewport.southwest;

      var latFraction = (latRad(ne.lat) - latRad(sw.lat)) / Math.PI;

      var lngDiff = ne.lng - sw.lng;
      var lngFraction = ((lngDiff < 0) ? (lngDiff + 360) : lngDiff) / 360;

      var latZoom = zoom(mapDims.height, WORLD_DIM.height, latFraction);
      var lngZoom = zoom(mapDims.width, WORLD_DIM.width, lngFraction);

      var latAvg = (ne.lat + sw.lat) / 2.0;
      var lngAvg = (ne.lng + sw.lng) / 2.0;

      return {
        fitZoom: Math.min(latZoom, lngZoom, ZOOM_MAX),
        center:  new google.maps.LatLng(latAvg, lngAvg)
      };
    },
    createGoogleLatLngBounds: function(SWLng, SWLat, NELng, NELat){
      return new google.maps.LatLngBounds(
        new google.maps.LatLng(SWLat, SWLng),
        new google.maps.LatLng(NELat, NELng)
      );
    },
    mapNameUpdates: [
      {mapType:'roadmap', newName: 'Standard'},
      {mapType:'hz_map',  newName: 'Light Gray'},
      {mapType:'hybrid',  newName: 'Satellite'}
    ],

    updateMapTypeNames: function(){
      HZApp.MapUtils.mapNameUpdates.map(HZApp.MapUtils.customMapTypeName);
      HZApp.map.setOptions({'mapTypeControl':true});
    },

    // map idle listener callback for updatig the map url route when the page is done moving
    updateMapLocation: function(){
      HZApp.Router.setCenterAndZoomHash(HZApp.map.getCenter(), HZApp.map.getZoom(), true);
    },

    customMapTypeName: function(mapNameUpdate){
      if (!HZApp.map.mapTypes[mapNameUpdate.mapType]) { return; }
      HZApp.map.mapTypes[mapNameUpdate.mapType].name = mapNameUpdate.newName;
    },
    catchClearSearch: function(element) {
      $(element).click(function() {
        HZApp.MapUtils.resetMap();
      });
    },
    resetMap: function(){
      HZApp.Markers.hzQueryMarker.updateMarkers(null);
      HZApp.SidebarUtils.sidebar.close();
      HZApp.SidebarUtils.sidebar.clear();
      HZApp.Router.clearHash('latlng');
      HZApp.Router.clearHash('q');
    },
    /*
      This is a convenience method for helping to parse the base map style object at HZApp.Styles.hzBaseMapStyle
      to the format required by the Google Maps Static API (https://developers.google.com/maps/documentation/static-maps/styling, 2017-05-05)
      so that the report map style can match the web map style.
      It is intended that this method would only need to be called manually to produce the style string which could then be included in the
      Report repo directly within the wms_utl.rb class at hz_base_map_style
    */
    parseStyleToStaticUrl: function(styles){
      styles = styles || HZApp.Styles.hzBaseMapStyle;
      var stylesOut = [];

      styles.map( function(style){
        var styleStr = '&style=';

        styleStr += 'feature:' + style.featureType + '|';
        styleStr += 'element:' + style.elementType + '|';

        var styleTags = [];
        style.stylers.map( function(s) {
          var s_key = Object.keys(s)[0];
          styleTags.push(s_key + ':' + s[s_key]);
        });

        styleStr += styleTags.join('|');
        styleStr = styleStr.replace(/\#/g, '0x');
        stylesOut.push(styleStr);
      });

      return encodeURI(stylesOut.join('&'));
    }
  };
})();

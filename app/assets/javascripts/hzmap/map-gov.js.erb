//create the map on load, when idle, jump to updateMap to get features
/* exported initMapGov */
function initMapGov() {
console.log('initMapGov');
HZApp.maGovLoaded = true
HZApp.mapLoaded = false
  var initialMapLocation = {
    center: {
      lat: 44.7228,
      lng: -103.2497
    },
    zoom: 4
  };

  $('#governors-menu').hide()
  $('#map-menu').show()


  // unpack the current hash and update the map location as needed
  initialMapLocation = HZApp.Router.unpackInitialMapLocation(initialMapLocation, location.hash);

  HZApp.mapGov = new google.maps.Map(document.getElementById('map'), {
    center: initialMapLocation.center,
    zoom: initialMapLocation.zoom,
    zoomControl: true,
    zoomControlOptions: {
      position: google.maps.ControlPosition.RIGHT_BOTTOM
    },
    streetViewControlOptions: {
      position: google.maps.ControlPosition.RIGHT_BOTTOM
    },
    mapTypeId: 'hz_map',
    mapTypeControlOptions: {
      mapTypeIds: ['hz_map','roadmap', 'hybrid' ],
      position: google.maps.ControlPosition.LEFT_TOP,
      style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
    },
    clickableIcons: false,
    fullscreenControl: false
  });

  //reset mapType names
  //refer to maptype spec: https://developers.google.com/maps/documentation/javascript/3.exp/reference#MapType
  HZApp.mapGov.setOptions({'mapTypeControl':false});
  google.maps.event.addListenerOnce(HZApp.mapGov, 'idle', HZApp.MapUtilsGov.updateMapTypeNames);

  //adds in the hz style into the basemap picker
  var hzStyledMap = new google.maps.StyledMapType(HZApp.Styles.hzBaseMapStyle, {name: 'Gray'});
  HZApp.mapGov.mapTypes.set('hz_map', hzStyledMap);

  //adds the map legend and geolocation button
  HZApp.mapGov.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(document.getElementById('legend'));
  HZApp.mapGov.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(document.getElementById('geolocation'));

  //add in the WMS tiles
  HZApp.WMTSUtilsGov.initializeTiles();

  //add listener on the map for clicks
  HZApp.WMTSUtilsGov.addClickListeners(HZApp.mapGov);

  //add listener to the clear search
  HZApp.MapUtilsGov.catchClearSearch('button.clear-search');

  //adds autocomplete and click listener
  HZApp.Autocomplete.createAutocomplete();
  HZApp.Autocomplete.createListener(HZApp.Autocomplete.autocomplete);

  // build out the markers
  /* jshint ignore:start */
  HZApp.Markers.hzQueryMarker = new HZApp.Constructors.HubzoneMapMarker({
    icon: '<%= image_path 'hubzone-map-marker.svg' %>',
    scaledSize: 40
  });
  HZApp.Markers.hzUserLocation = new HZApp.Constructors.HubzoneMapMarker({
    icon: '<%= image_path 'geolocation-marker.svg' %>',
    scaledSize: 17
  });
  /* jshint ignore:end */

  //build the legend
  HZApp.LegendGov.buildLegend(HZApp.LegendGov.legend);

  // build the sidebar
  HZApp.SidebarUtils.buildSidebar();

  //returns the mapGov
  return HZApp.mapGov;
}


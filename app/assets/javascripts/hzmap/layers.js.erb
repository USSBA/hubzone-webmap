// hubzone data layer style config

HZApp.Constructors.Layers.newPolygonSymbolizer = function(styleOptions){
    return ('<PolygonSymbolizer>' +
              '<Fill>' +
                '<CssParameter name="fill">' + (styleOptions.fillColor || HZApp.Layers.defaults.defaultColor) +'</CssParameter>' +
                '<CssParameter name="fill-opacity">' + (styleOptions.fillOpacity || HZApp.Layers.defaults.defaultFillOpacity) + '</CssParameter>' +
              '</Fill>' +
              '<Stroke>' +
                '<CssParameter name="stroke">' + (styleOptions.strokeColor || HZApp.Layers.defaults.defaultColor) + '</CssParameter>' +
                '<CssParameter name="stroke-width">' + (styleOptions.strokeWidth || HZApp.Layers.defaults.defaultStrokeWidth) + '</CssParameter>' +
                '<CssParameter name="stroke-opacity">' + (styleOptions.strokeOpacity || HZApp.Layers.defaults.defaultStrokeOpacity) + '</CssParameter>' +
              '</Stroke>' +
            '</PolygonSymbolizer>');
};

HZApp.Constructors.Layers.newCircleSymbolizer = function(styleOptions){
  var sldString = HZApp.Constructors.Layers.newPolygonSymbolizer(styleOptions);
  return (
    sldString +=
    ('<PolygonSymbolizer>' +
      '<Fill>' +
        '<GraphicFill>' +
          '<Graphic>' +
            '<Mark>' +
              '<WellKnownName>circle</WellKnownName>' + 
              '<Fill>' +
                '<CssParameter name="fill">' + (styleOptions.fillColor || HZApp.Layers.defaults.defaultCircleColor) +'</CssParameter>' +
              '</Fill>' +
            '</Mark>' +
            '<Size>' + (styleOptions.circleSize || HZApp.Layers.defaults.defaultCircleSize) + '</Size>' +
          '</Graphic>' +
        '</GraphicFill>' +
      '</Fill>' +
    '</PolygonSymbolizer>')
  );
};


HZApp.Layers = (function(){
  var defaults = { //this is temp until i can refactor the rest of HZApp.Layers
    defaultCircleSize: 3,
    defaultColor: '#377EB8',
    defaultCircleColor: '#FFFFFF',
    defaultFillOpacity: 0.5,
    defaultStrokeOpacity: 1,
    defaultStrokeWidth: 1.25
  };

  return {
    defaults: {
      defaultCircleSize: 3,
      defaultColor: '#377EB8',
      defaultCircleColor: '#FFFFFF',
      defaultFillOpacity: 0.5,
      defaultStrokeOpacity: 1,
      defaultStrokeWidth: 1.25
    },
    newLayer: function(options){
      this.overlay = [];
      this.layerName = options.layerName;
      this.style = options.style;


      this.buildStyleRules = function(){
        var styleRules = '<Rule>';
        if (this.style.type === 'polygon'){
          styleRules += HZApp.Constructors.Layers.newPolygonSymbolizer(this.style);
        } else if (this.style.type === 'circle'){
          styleRules += HZApp.Constructors.Layers.newCircleSymbolizer(this.style);
        }
        styleRules += '</Rule>';
        return styleRules;
      };

      this.styleRules = this.buildStyleRules();

      this.constructSLDXML = function(){
        return  (
          ('<?xml version="1.0" encoding="UTF-8"?>' +
            '<StyledLayerDescriptor xmlns="http://www.opengis.net/sld" xmlns:ogc="http://www.opengis.net/ogc" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0.0" xsi:schemaLocation="http://www.opengis.net/sld StyledLayerDescriptor.xsd">' +
              '<NamedLayer>' +
                "<Name><%= MAP_CONFIG[:geom_wms_settings][:workspace] %>:" + this.layerName + '</Name>' +
                  '<UserStyle>' +
                    '<FeatureTypeStyle>' +
                      this.styleRules + 
                    '</FeatureTypeStyle>' +
                  '</UserStyle>' +
              '</NamedLayer>' +
            '</StyledLayerDescriptor>')
        );
      };
      this.sldXML = this.constructSLDXML();

    },
    // this object holds the current google overlays in the .overlay array and the per layer styles
    // order in this object defines draw order on the map:
    // first object is drawn first, then next on top of that, etc.
    hzWMSOverlays: {
      indian_lands: {
      	overlay: [],
      	style: {
    	    fillColor: '#984EA3',
    	    fillOpacity: defaults.defaultFillOpacity,
    	    strokeColor: '#984EA3',
    	    strokeOpacity: defaults.defaultStrokeOpacity,
    	    strokeWidth: defaults.defaultStrokeWidth,
    	    styleExpiring: false
      	}
      },
      qnmc: {
      	overlay: [],
      	style: {
    	    fillColor: '#377EB8',
    	    fillOpacity: defaults.defaultFillOpacity,
    	    strokeColor: '#377EB8',
    	    strokeOpacity: defaults.defaultStrokeOpacity,
    	    strokeWidth: defaults.defaultStrokeWidth,
    	    styleExpiring: true
      	}
      },
      qct: {
      	overlay:[],
      	style: {
    	    fillColor: '#4DAF4A',
    	    fillOpacity: defaults.defaultFillOpacity,
    	    strokeColor: '#4DAF4A',
    	    strokeOpacity: defaults.defaultStrokeOpacity,
    	    strokeWidth: defaults.defaultStrokeWidth,
    	    styleExpiring: true,
          hzLayerType: 'economic'
        }
      },
      brac: {
      	overlay: [],
      	style: {
    	    fillColor: '#FF7F00',
    	    fillOpacity: defaults.defaultFillOpacity,
    	    strokeColor: '#FF7F00',
    	    strokeOpacity: defaults.defaultStrokeOpacity,
    	    strokeWidth: defaults.defaultStrokeWidth,
    	    styleExpiring: true
      	}
      }
    },
    createPolygonSymbolizer: function(options){
      return options;
    },
    constructSLDXML: function(layer){
    	var style = this.hzWMSOverlays[layer].style;
      return encodeURIComponent('<?xml version="1.0" encoding="UTF-8"?>' +
              '<StyledLayerDescriptor xmlns="http://www.opengis.net/sld" xmlns:ogc="http://www.opengis.net/ogc" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0.0" xsi:schemaLocation="http://www.opengis.net/sld StyledLayerDescriptor.xsd">' +
    	          '<NamedLayer>' +
    		          "<Name><%= MAP_CONFIG[:geom_wms_settings][:workspace] %>:" + layer + '</Name>' +
    			          '<UserStyle>' +
    				          '<FeatureTypeStyle>' +
    				          	(style.styleExpiring ? this.styleWithExpiration(style) : this.styleWithoutExpiration(style) ) +
    				          '</FeatureTypeStyle>' +
    			          '</UserStyle>' +
    	          '</NamedLayer>' +
              '</StyledLayerDescriptor>');
    },
    styleWithExpiration: function(style){
    return ('<Rule>' +
    	        '<Name>not expiring</Name>' +
    	        '<ogc:Filter>' +
    		        '<ogc:PropertyIsEqualTo>' +
    			        '<ogc:Function name="isNull">' +
    			        	'<ogc:PropertyName>expires</ogc:PropertyName>' +
    			        '</ogc:Function>' +
    			        '<ogc:Literal>true</ogc:Literal>' +
    		        '</ogc:PropertyIsEqualTo>' +
    	        '</ogc:Filter>' +
    	        '<PolygonSymbolizer>' +
    		        '<Fill>' +
    			        '<CssParameter name="fill">' + style.fillColor + '</CssParameter>' +
    			        '<CssParameter name="fill-opacity">' + style.fillOpacity + '</CssParameter>' +
    		        '</Fill>' +
    		        '<Stroke>' +
    			        '<CssParameter name="stroke">' + style.strokeColor + '</CssParameter>' +
    			        '<CssParameter name="stroke-width">' + style.strokeWidth + '</CssParameter>' +
    		        '</Stroke>' +
    	        '</PolygonSymbolizer>' +
            '</Rule>' +
            '<Rule>' +
    	        '<Name>expiring</Name>' +
    	        '<ogc:Filter>' +
    		        '<ogc:PropertyIsEqualTo>' +
    		        	'<ogc:Function name="isNull">' +
    			        	'<ogc:PropertyName>expires</ogc:PropertyName>' +
    		        	'</ogc:Function>' +
    		        	'<ogc:Literal>false</ogc:Literal>' +
    	        	'</ogc:PropertyIsEqualTo>' +
    	        '</ogc:Filter>' +
    	        '<PolygonSymbolizer>' +
    		        '<Fill>' +
    			        '<GraphicFill>' +
    				        '<Graphic>' +
    					        '<Mark>' +
    						        '<WellKnownName>shape://backslash</WellKnownName>' +
    						        '<Stroke>' +
    							        '<CssParameter name="stroke">' + style.strokeColor + '</CssParameter>' +
    							        '<CssParameter name="stroke-width">' + style.strokeWidth + '</CssParameter>' +
    						        '</Stroke>' +
    					        '</Mark>' +
    					        '<Size>16</Size>' +
    				        '</Graphic>' +
    			        '</GraphicFill>' +
    		        '</Fill>' +
    		        '<Stroke>' +
    			        '<CssParameter name="stroke">' + style.strokeColor + '</CssParameter>' +
    			        '<CssParameter name="stroke-width">' + style.strokeWidth + '</CssParameter>' +
    		        '</Stroke>' +
    	        '</PolygonSymbolizer>' +
            '</Rule>');
    },
    styleWithoutExpiration: function(style){
      return ('<Rule>' +
    	          '<Name>not expiring</Name>' +
    	          '<PolygonSymbolizer>' +
    		          '<Fill>' +
    			          '<CssParameter name="fill">' + style.fillColor + '</CssParameter>' +
    			          '<CssParameter name="fill-opacity">' + style.fillOpacity + '</CssParameter>' +
    		          '</Fill>' +
    		          '<Stroke>' +
    			          '<CssParameter name="stroke">' + style.strokeColor + '</CssParameter>' +
    			          '<CssParameter name="stroke-width">' + style.strokeWidth + '</CssParameter>' +
    		          '</Stroke>' +
    	          '</PolygonSymbolizer>' +
              '</Rule>');
    }
  };
})();

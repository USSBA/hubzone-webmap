// reporting utility
HZApp.Report = (function(){
  //adds listeners
  $(function() {
    $(document).bind("keydown", HZApp.Report.catchKeyStrokeToPrint);
    $(document).on('click','#map-report', HZApp.Report.requestReport);
  });

  return {
    catchKeyStrokeToPrint: function(e){
      if((e.ctrlKey || e.metaKey) && e.keyCode === 80){
        e.preventDefault();
        HZApp.Report.requestReport(); 
      } else {
        return;
      }
    },
    requestReport: function() {  // fetch the app state to send off to the report
      HZApp.Report.showReportWaiting();
      HZApp.HZQuery.zoom = HZApp.map.getZoom();

      var url = "<%= MAP_CONFIG[:hubzone_report_host] + MAP_CONFIG[:hubzone_api_report_path] %>"; //jshint ignore:line
      url += HZApp.Report.getReportRequestParams(HZApp.HZQuery);

      request_type = "<%= MAP_CONFIG[:hubzone_report_request_type] %>" //jshint ignore:line
      if (request_type === "window_open"){
        window.open(url, '_blank');
      } else {
        var req = new XMLHttpRequest();
        HZApp.Report.buildAndRunRequest(req, url);
      }
    },
    buildAndRunRequest: function(req, url){
      req.open("GET", url, true);
      req.responseType = "blob";
      req.onerror = HZApp.Report.requestReportError;
      req.onload = HZApp.Report.handleReportResponse;
      req.send();
    },
    handleReportResponse: function handleReportResponse(event){
      HZApp.Report.hideReportWaiting();
      var link = HZApp.Report.generateDownloadLink(event.currentTarget.response);
      HZApp.Report.downloadReport(link);
    },
    generateDownloadLink: function(blob){
      var link = document.createElement('a');
      link.target = '_blank';
      link.href = window.URL.createObjectURL(blob);
      link.download = ("hz_report" + "_address_" +
                       HZApp.HZQuery.formatted_address.replace(' ', '_') + ".pdf");
      return link;
    },
    downloadReport: function(link){
      link.click();
      window.URL.revokeObjectURL(link.href);
    },
    //takes a hzQuery object as input and parses it for a report GET
    getReportRequestParams:function(hzQuery){
      var params = {};
      params.zoom = hzQuery.zoom;
      params.hubzone = encodeURIComponent(JSON.stringify(hzQuery.hubzone));
      params.formatted_address = encodeURIComponent(hzQuery.formatted_address);
      var queryMarker = hzQuery.geocodeLocation;
      if (queryMarker){
        params.latlng = [queryMarker.lat, queryMarker.lng].join(',');
      } else {
        params.latlng = [HZApp.map.getCenter().lat(), HZApp.map.getCenter().lng()].join(',');
      }

      params.locale = document.documentElement.lang || 'en'; //jshint ignore: line

      return ("?latlng=" + params.latlng +
              "&zoom=" + params.zoom +
              "&formatted_address=" + params.formatted_address +
              "&locale=" + params.locale +
              "&hubzone=" + params.hubzone);
    },
    requestReportError: function requestReportError(){

      $('#report-waiting').html(I18n.t('report.error'));
      HZApp.Report.clearReportWaiting(7500);
    },
    showReportWaiting: function(){
      $('#report-waiting').html(I18n.t('report.generating'));
      $('#report-waiting').show();
    },
    hideReportWaiting: function(){
      $('#report-waiting').html(I18n.t('report.created'));
      HZApp.Report.clearReportWaiting(5000);
    },
    clearReportWaiting: function(timeout){
      setTimeout(function(){
        $('#report-waiting').html();
        $('#report-waiting').hide();
      }, timeout);
    }
  };
})();

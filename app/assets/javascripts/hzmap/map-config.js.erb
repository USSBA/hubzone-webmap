//defining global variables for hubzone map controllers
var map = {}; //the map object
var infoWindow = {}; //infowindow object
var apiKey = '<%= MAP_CONFIG[:google_api_key] %>'; //google maps api key
console.log('apiKey', apiKey);
var currentFeaturesIDs = [];
var geocodeQuery = ''; // string of geocodequery from input text
var geomUniqID = 'id';
var googleCDNURL = 'https://maps.googleapis.com/maps/api/js?key=<%=MAP_CONFIG[:google_api_key]%>'

var geomWFSSettings = {
  urlRoot: '<%= MAP_CONFIG[:geomWFSSettings]["urlRoot"] %>',
  db: '<%= MAP_CONFIG[:geomWFSSettings]["db"] %>',
  table: '<%= MAP_CONFIG[:geomWFSSettings]["table"] %>',
  srs: '<%= MAP_CONFIG[:geomWFSSettings]["srs"] %>'
};


//define a new MapGeoJson class function
var MapGeoJson = function(){

  this.emptyGeoJson = function(){
    return {
      type: 'FeatureCollection',
      crs: {
        type: "name",
        properties: {
          name: "urn:ogc:def:crs:EPSG::4326"
        }
      },
      totalFeatures: 0,
      features: []
    }
  };

  this.currentFeatures = new this.emptyGeoJson;;
  this.currentFeaturesIDs = [];
  this.mapScope = {};
  this.uniqueID = '';
  this.newFeaturesIDs = [];
  this.newFeatures = [];
  this.updatedFeaturesIDs = [];
  this.updatedFeatures = [];
  this.featuresToAdd = new this.emptyGeoJson;
  this.featuresToRemove = [];

  this.diffData = function(newData){
    this.featuresToRemove = [];
    this.featuresToAdd.features = [];
    this.featuresToAdd.totalFeatures = 0;
    
    if (this.currentFeaturesIDs.length === 0){
      this.featuresToAdd.features = newData.features;
      this.featuresToAdd.totalFeatures = newData.totalFeatures
      this.currentFeatures.features = this.featuresToAdd.features;
      this.currentFeatures.totalFeatures = this.featuresToAdd.totalFeatures;
      for (var i = 0; i < newData.features.length; i++) {
      // for (var i = newData.features.length - 1; i >= 0; i--) {
        this.currentFeaturesIDs.push(newData.features[i].properties[this.uniqueID]);
      }
    } else {
      //get the ids of all the new features in one array and the features in another
      this.newFeaturesIDs = [];
      this.newFeatures = newData.features.map(function(feature){
        var featureID = feature.properties[this.uniqueID]
        this.newFeaturesIDs.push(featureID)
        return feature;
      }, this);

      this.updatedFeaturesIDs = [];
      this.updatedFeatures = [];

      //compare the new feature ids with the current feature ids, 
      //if any are missing from the current features, add them to the map and the 'updatedfeatures'
      for (var j = 0; j < this.newFeaturesIDs.length; j++) {
      // for (var j = this.newFeaturesIDs.length - 1; j >= 0; j--) {
        if (!this.currentFeaturesIDs.includes(this.newFeaturesIDs[j])){
          
          //these are new and need to get added by google maps
          this.featuresToAdd.features.push(this.newFeatures[j]);
          this.featuresToAdd.totalFeatures += 1;

          //these will become the current complete list of features
          this.updatedFeatures.push(this.newFeatures[j]);
          this.updatedFeaturesIDs.push(this.newFeaturesIDs[j]);
        }
      }
      //go across teh current features, if any are not in newfeatures, remove
      //else push them into updatedFeatures, which becomes the complete list
      for (var k = 0; k < this.currentFeaturesIDs.length; k++) {
      // for (var k = this.currentFeaturesIDs.length - 1; k >= 0; k -- ){
        if (!this.newFeaturesIDs.includes(this.currentFeaturesIDs[k])){
          this.featuresToRemove.push(this.currentFeatures.features[k].properties[this.uniqueID]);
        } else {
          this.updatedFeatures.push(this.currentFeatures.features[k]);
          this.updatedFeaturesIDs.push(this.currentFeaturesIDs[k]);
        }
      }
      this.currentFeaturesIDs = this.updatedFeaturesIDs;
      this.currentFeatures.features = this.updatedFeatures;
      this.currentFeatures.totalFeatures = this.updatedFeatures.length;
    }
  };

};

//create a new mapGeoJson class object
var mapGeoJson = new MapGeoJson();
mapGeoJson.uniqueID = geomUniqID;

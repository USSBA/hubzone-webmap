//defining global variables for hubzone map controllers
var map = {}; //the map object
var infoWindow = {}; //infowindow object
var apiKey = '<%= MAP_CONFIG[:google_api_key] %>'; //google maps api key
var currentFeaturesIDs = [];
var geocodeQuery = ''; // string of geocodequery from input text
var googleCDNURL = 'https://maps.googleapis.com/maps/api/js?key=<%=MAP_CONFIG[:google_api_key]%>'
var mapMarkers = [];

var geomWFSSettings = JSON.parse('<%= MAP_CONFIG[:geomWFSSettings].to_json %>');

//define a new MapGeoJson class function
var MapGeoJson = function(){

  //construct a new featuredataset object for holding geojson feature collections and 
  // an array of the parsed feature ids for use in diffing between 'current' and 'new' data
  var FeatureDataset = function(){
    return {
      fc: {
        type: 'FeatureCollection',
        crs: {
          type: "name",
          properties: {
            name: "urn:ogc:def:crs:EPSG::4326"
          }
        },
        totalFeatures: 0,
        features: []
      },
      ids: []
    }
  };

  //holders for the current features already rendered in the map 'map data state'
  var currentFeatures = new FeatureDataset();
  
  // helper method of MapGeoJson for comparing current data with new incoming data
  // and generating two new datasets: 
  //  1) a collection of features not currently in the map that need to be added
  //  2) an array of feature IDS for features no longer visible in map that need to be removed
  this.diffData = function(newData){
    var newFeatures = new FeatureDataset();         //holders for the new features that just arrived
    var updatedFeatures = new FeatureDataset();     //holders for the features that are in the process of being updated, will become new current

    //holders for the output features to add or remove, fed to google maps later.
    // for diffFeatures, the 'fc' object will be the features added to the the map
    // the 'ids' array will be those that get removed from the map 
    var diffFeatures = new FeatureDataset();        

    //get the ids of all the new features in one array and the features in another
    for (var j = 0; j < newData.features.length; j++) {
      var feature = newData.features[j];
      var featureID = feature.properties['hztype'] + '_' + feature.properties['res'] + '_' + feature.properties['sourceid'];
      newFeatures.ids.push(featureID);
      newFeatures.fc.features.push(feature);

      if (currentFeatures.ids.indexOf(featureID) === -1){
        //these are new and need to get added by google maps
        diffFeatures.fc.features.push(feature);
        diffFeatures.fc.totalFeatures += 1;

        //these will become the current complete list of features
        updatedFeatures.fc.features.push(feature);
        updatedFeatures.ids.push(featureID);
      }
    }

    //go across the current features, if any are not in newFeatures, remove
    //else push them into updatedFeatures, which becomes the complete list
    for (var k = 0; k < currentFeatures.ids.length; k++) {
      if (newFeatures.ids.indexOf(currentFeatures.ids[k]) === -1){
        diffFeatures.ids.push(currentFeatures.ids[k]);
      } else {
        updatedFeatures.fc.features.push(currentFeatures.fc.features[k]);
        updatedFeatures.ids.push(currentFeatures.ids[k]);
      }
    }

    //finally update currentFeatures 
    currentFeatures.ids = updatedFeatures.ids;
    currentFeatures.fc.features = updatedFeatures.fc.features;
    currentFeatures.fc.totalFeatures = updatedFeatures.fc.features.length;
    
    return diffFeatures;
  };
};

//create a new mapGeoJson class object
var mapGeoJson = new MapGeoJson();

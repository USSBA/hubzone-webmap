//  hubzone layer utilities

HZApp.Layers.LayerUtils = (function(){
  return {
    newSLDXMLStyle: function(options){ //build a new style object instance based on passed in parameters
      var layerName = options.layerName;
      var styles = options.styles; //array of styles

      for (var i = 0; i < styles.length; i++) {
        styles[i] = HZApp.Layers.LayerUtils.checkStylesForNulls(styles[i]);
      }

      var styleRules = HZApp.Layers.LayerUtils.buildStyleRules(styles);

      //this is what will be passed to the URL
      return HZApp.Layers.LayerUtils.constructSLDXML({
        layerName: layerName,
        styleRules: styleRules  
      }); 
    },
    buildStyleRules: function(styles){
      var styleRules = '<se:Rule>';
      for (var i = 0; i < styles.length; i++) {
        if (styles[i].type === 'polygon'){
          styleRules += HZApp.Layers.LayerUtils.newPolygonSymbolizer(styles[i]);
        } else if (styles[i].type === 'circle'){
          styleRules += HZApp.Layers.LayerUtils.newCircleSymbolizer(styles[i]);
        } else if (styles[i].type === 'horline'){
          styleRules += HZApp.Layers.LayerUtils.newHorLineSymbolizer(styles[i]);
        } else { //return a a basic polygon if the type is not recognized
          styleRules += HZApp.Layers.LayerUtils.newPolygonSymbolizer(styles[i]);
        }
      }
      styleRules += '</se:Rule>';
      return styleRules;
    },
    checkStylesForNulls: function(style){
      var type = style.type;
      Object.keys(HZApp.Layers.LayerDefs.defaults).map(function(defaultStyle){
        if (style[defaultStyle]){
          style[defaultStyle] = style[defaultStyle];
        } else {
          style[defaultStyle] = HZApp.Layers.LayerDefs.defaults[defaultStyle];
        }
      });
      style.type = type;
      return style;
    },
    constructSLDXML: function(options){
      return  (
        ('<?xml version="1.0" encoding="UTF-8"?>' +
          '<StyledLayerDescriptor ' + 
          'xmlns="http://www.opengis.net/sld" ' + 
          'xmlns:ogc="http://www.opengis.net/ogc" ' + 
          'xmlns:xlink="http://www.w3.org/1999/xlink" ' + 
          'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0.0" xsi:schemaLocation="http://www.opengis.net/sld StyledLayerDescriptor.xsd" ' + 
          'xmlns:se="http://www.opengis.net/se">' +
            '<NamedLayer>' +
              "<Name><%= MAP_CONFIG[:geom_wms_settings][:workspace] %>:" + options.layerName + '</Name>' +
                '<UserStyle>' +
                  '<FeatureTypeStyle>' +
                    options.styleRules + 
                  '</FeatureTypeStyle>' +
                '</UserStyle>' +
            '</NamedLayer>' +
          '</StyledLayerDescriptor>')
      );
    },
    newHorLineSymbolizer: function(styleOptions){
      return (
        '<PolygonSymbolizer>' +
          '<Fill>' +
            '<GraphicFill>' +
              '<Graphic>' +
                '<Mark>' +
                  '<WellKnownName>shape://slash</WellKnownName>' + 
                  '<Stroke>' +
                    '<CssParameter name="stroke">' + styleOptions.lineStrokeColor + '</CssParameter>' +
                    '<CssParameter name="stroke-width">' + styleOptions.lineStrokeWidth + '</CssParameter>' +
                    '<CssParameter name="stroke-opacity">' + styleOptions.lineStrokeOpacity + '</CssParameter>' +
                  '</Stroke>' +
                '</Mark>' +
                '<Size>' + styleOptions.tileSize + '</Size>' +
                '<se:Rotation>' + 
                  '<ogc:Literal>' + styleOptions.lineRotation + '</ogc:Literal>' + 
                '</se:Rotation>' + 
              '</Graphic>' +
            '</GraphicFill>' +
          '</Fill>' +
          '<Stroke>' +
            '<CssParameter name="stroke">' + styleOptions.strokeColor + '</CssParameter>' +
            '<CssParameter name="stroke-width">' + styleOptions.strokeWidth + '</CssParameter>' +
            '<CssParameter name="stroke-opacity">' + styleOptions.strokeOpacity + '</CssParameter>' +
          '</Stroke>' +
        '</PolygonSymbolizer>'
      );
    },
    newCircleSymbolizer: function(styleOptions){
      return (
        '<PolygonSymbolizer>' +
          '<Fill>' +
            '<GraphicFill>' +
              '<Graphic>' +
                '<Mark>' +
                  '<WellKnownName>circle</WellKnownName>' + 
                  '<Fill>' +
                    '<CssParameter name="fill">' + styleOptions.circleFillColor +'</CssParameter>' +
                    '<CssParameter name="fill-opacity">' + styleOptions.circleFillOpacity + '</CssParameter>' +
                  '</Fill>' +
                  '<Stroke>' +
                    '<CssParameter name="stroke">' + styleOptions.circleStrokeColor + '</CssParameter>' +
                    '<CssParameter name="stroke-opacity">' + styleOptions.circleStrokeOpacity + '</CssParameter>' +
                    '<CssParameter name="stroke-width">' + styleOptions.circleStrokeWidth + '</CssParameter>' +
                  '</Stroke>' +
                '</Mark>' +
                '<Size>' + styleOptions.tileSize + '</Size>' +
              '</Graphic>' +
            '</GraphicFill>' +
          '</Fill>' +
          '<VendorOption name="graphic-margin">' + styleOptions.graphicSpacing + '</VendorOption>' +
          '<Stroke>' +
            '<CssParameter name="stroke">' + styleOptions.strokeColor + '</CssParameter>' +
            '<CssParameter name="stroke-width">' + styleOptions.strokeWidth + '</CssParameter>' +
            '<CssParameter name="stroke-opacity">' + styleOptions.strokeOpacity + '</CssParameter>' +
          '</Stroke>' +
        '</PolygonSymbolizer>'
      );
    },
    newPolygonSymbolizer: function(styleOptions){
      return (
        '<PolygonSymbolizer>' +
          '<Fill>' +
            '<CssParameter name="fill">' + styleOptions.fillColor +'</CssParameter>' +
            '<CssParameter name="fill-opacity">' + styleOptions.fillOpacity + '</CssParameter>' +
          '</Fill>' +
          '<Stroke>' +
            '<CssParameter name="stroke">' + styleOptions.strokeColor + '</CssParameter>' +
            '<CssParameter name="stroke-width">' + styleOptions.strokeWidth + '</CssParameter>' +
            '<CssParameter name="stroke-opacity">' + styleOptions.strokeOpacity + '</CssParameter>' +
          '</Stroke>' +
        '</PolygonSymbolizer>'
      );
    }
  }; 
})();

version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1
  terraform: circleci/terraform@2.0.1
  ruby: circleci/ruby@2.0
  browser-tools: circleci/browser-tools@1.1
  #node: circleci/node@5

executors:
  base:
    docker:
      - image: cimg/base:2020.12
  ruby:
    docker:
      - image: cimg/ruby:2.7-browsers
        environment:
          RAILS_ENV: test
          OPENSSL_CONF: /etc/ssl/

  ruby-postgres:
    docker:
      - image: cimg/ruby:2.7-browsers
        environment:
          HUBZONE_MAP_HOST: local
          SECRET_KEY_BASE: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
          HUBZONE_GOOGLE_API_KEY: $HUBZONE_GOOGLE_API_KEY
          HUBZONE_API_KEY: $HUBZONE_GOOGLE_API_KEY
          HUBZONE_MAP_DB_USER: postgres
          HUBZONE_MAP_DB_PASSWORD: postgres
          RAILS_ENV: test
          RAILS_LOG_TO_STDOUT: true
          OPENSSL_CONF: /etc/ssl/
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
      - image: cimg/postgres:12.9-postgis
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

commands:
  install-phantom:
    steps:
      - run:
          name: install phantom-js
          command: |
            wget https://s3.amazonaws.com/sba-shared-services-lower-ci/public-files/phantomjs-2.1.1-linux-x86_64.tar.bz2
            tar -xf phantomjs-2.1.1-linux-x86_64.tar.bz2
            rm phantomjs-2.1.1-linux-x86_64.tar.bz2
            sudo mv phantomjs-2.1.1-linux-x86_64/bin/phantomjs /bin/phantomjs
            sudo chmod 555 /bin/phantomjs
            rm -r phantomjs-2.1.1-linux-x86_64

  configure-ecr-environment:
    parameters:
      image-name:
        type: string
        default: hubzone/hubzone-webmap
    steps:
      - run:
          name: Configure ECR Build Environment
          command: |
            echo 'AWS_ACCOUNT_ID="`aws sts get-caller-identity --query Account --output text`"' >> $BASH_ENV
            echo 'AWS_ECR_REGISTRY_ENDPOINT="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"' >> $BASH_ENV
            echo 'AWS_ECR_IMAGE_NAME="${AWS_ECR_REGISTRY_ENDPOINT}/<< parameters.image-name >>"' >> $BASH_ENV
            source $BASH_ENV

jobs:
  brakeman:
    executor: ruby
    steps:
      - checkout
      - install-phantom
      - ruby/install-deps
      - run:
          name: brakeman
          command: |
            gem install --no-document brakeman
            brakeman --exit-on-warn .

  jslint:
    executor: ruby
    steps:
      - checkout
      - install-phantom
      - ruby/install-deps
      - run:
          name: jslint
          command: |
            bundle exec rake jshint

  rspec:
    executor: ruby-postgres
    steps:
      - checkout
      - install-phantom
      - ruby/install-deps
      - run:
          name: rake db:migrate
          command: |
            bundle exec rake db:create db:migrate
      - run:
          name: rspec
          command: |
            bundle exec rspec --format progress

  rubocop:
    executor: ruby
    steps:
      - checkout
      - browser-tools/install-browser-tools
      - ruby/install-deps
      - ruby/rubocop-check

  teaspoon:
    executor: ruby
    steps:
      - checkout
      - install-phantom
      - ruby/install-deps
      - run:
          name: teaspoon
          command: |
            bundle exec teaspoon --coverage=default

  terraform-format:
    executor: base
    steps:
      - checkout
      - terraform/install:
          terraform_version: "1.3.4"
      - run:
          name: terraform fmt
          command: |
            cd terraform/
            terraform fmt -recursive -check

  terraform-validate:
    executor: base
    parameters:
      workspace:
        type: string
        default: demo
    environment:
      AWS_REGION: us-east-1
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: $OIDC_ROLE_ARN
          role-session-name: oidc-hubzone-webmap
      - terraform/install:
          terraform_version: "1.3.4"
      - run:
          name: terraform validate
          command: |
            cd terraform/
            terraform init -input=false
            terraform workspace select << parameters.workspace >>
            terraform validate

  service-deployment:
    executor: base
    environment:
      AWS_REGION: us-east-1
      AWS_DEFAULT_REGION: us-east-1
    parameters:
      image-tag:
        type: string
      workspace:
        type: string
      directory:
        type: string
        default: terraform
      image-name:
        type: string
        default: hubzone/hubzone-webmap
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.11
      - aws-cli/setup:
          role-arn: $OIDC_ROLE_ARN
          role-session-name: oidc-hubzone-webmap
      - configure-ecr-environment:
          image-name: << parameters.image-name >>
      - run:
          name: Login to ECR registry
          command: |
            aws ecr get-login-password --region $AWS_REGION | \
              docker login --username AWS --password-stdin $AWS_ECR_REGISTRY_ENDPOINT
      - run:
          name: Build and Push Container
          command: |
            docker image build -t webmap:latest .
            echo "Pushing Image: ${AWS_ECR_IMAGE_NAME}:<< parameters.image-tag >>"
            docker image tag webmap:latest "${AWS_ECR_IMAGE_NAME}:<< parameters.image-tag >>"
            docker image push "${AWS_ECR_IMAGE_NAME}:<< parameters.image-tag >>"
            echo "Push complete!"
            echo "Pushing Image: ${AWS_ECR_IMAGE_NAME}:${CIRCLE_SHA1}"
            docker image tag webmap:latest "${AWS_ECR_IMAGE_NAME}:${CIRCLE_SHA1}"
            docker image push "${AWS_ECR_IMAGE_NAME}:${CIRCLE_SHA1}"
            echo "Push complete!"
      - run:
          name: Logout of ECR registry
          command: |
            docker logout $AWS_ECR_REGISTRY_ENDPOINT
      - terraform/install:
          terraform_version: "1.3.4"
      - run:
          name: terraform apply
          command: |
            cd << parameters.directory >>
            terraform init -input=false
            echo "image_tag = \"${CIRCLE_SHA1}\"" >> ./build.auto.tfvars
            terraform workspace select << parameters.workspace >>
            terraform plan -out=<< parameters.workspace >>.tfplan -input=false
            terraform apply -input=false << parameters.workspace >>.tfplan

workflows:
  version: 2
  integration-tests:
    jobs:
      - brakeman
      - jslint
      - rspec
      - rubocop
      - teaspoon
      - terraform-format
      - terraform-validate:
          context: oidc-certify-lower


  preview:
    jobs:
      - service-deployment:
          context: oidc-certify-lower
          workspace: demo
          image-tag: latest
          image-name: hubzone-webmap-preview
          directory: terraform/preview
          filters:
            branches:
              only:
                - preview-map
            tags:
              ignore:
                - /.*/
  preview-stg:
    jobs:
      - service-deployment:
          context: oidc-certify-upper
          workspace: stg
          image-tag: stg-latest
          image-name: hubzone-webmap-preview
          directory: terraform/preview
          filters:
            branches:
              only:
                - preview-map-stg
            tags:
              ignore:
                - /.*/

  preview-prod:
    jobs:
      - hold-for-approval-preview:
          type: approval
          context: oidc-certify-upper
          filters:
            branches:
              only:
                - preview-map-prod
            tags:
              ignore:
                - /.*/
      - service-deployment:
          context: oidc-certify-upper
          workspace: prod
          image-tag: prod-latest
          image-name: hubzone-webmap-preview
          requires:
            - hold-for-approval-preview
          directory: terraform/preview
          filters:
            branches:
              only:
                - preview-map-prod
            tags:
              ignore:
                - /.*/

  demo:
    jobs:
      - service-deployment:
          context: oidc-certify-lower
          workspace: demo
          image-tag: $CIRCLE_TAG
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - deploy-demo

  staging:
    jobs:
      - service-deployment:
          context: oidc-certify-upper
          workspace: stg
          image-tag: $CIRCLE_TAG
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^rc-v[0-9]+(\.[0-9]+)*$/

  production:
    jobs:
      - service-deployment:
          context: oidc-certify-upper
          workspace: stg
          image-tag: $CIRCLE_TAG
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v[0-9]+(\.[0-9]+)*$/



# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1

orbs:
  ruby: circleci/ruby@1.1.2
  node: circleci/node@4.2.0
  aws-cli: circleci/aws-cli@1.4.0
  terraform: circleci/terraform@2.0.1

executors:
  ruby:
    docker:
      - image: circleci/ruby:2.5.1-node-browsers
        environment:
          RAILS_ENV: test
  ruby-with-postgres:
    docker:
      - image: circleci/ruby:2.5.1-node-browsers-legacy
        environment:
          HUBZONE_MAP_DB_USER: postgres
          HUBZONE_MAP_DB_PASSWORD: postgres
          RAILS_ENV: test
      - image: circleci/postgres:9.6-alpine-postgis
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
  base:
    docker:
      - image: cimg/base:2020.12

commands:
  install-system-dependencies:
    steps:
      - run:
          name: Install system dependencies
          command: |
            sudo apt update
            sudo apt install -y \
              postgresql-client-9.6
  install-and-cache-gems:
    steps:
      - checkout
      - ruby/install-deps:
          key: gems-v1
      - run: sudo npm install -g istanbul
  migrate-db:
    steps:
      - run:
          name: migrate-db
          command: |
            bundle exec rake db:create db:migrate
  build-containers:
    steps:
      - ecr-image-build:
          image_name: hubzone/hubzone-report
  push-containers:
    steps:
      - ecr-image-push:
          image_name: hubzone/hubzone-report
  aws-init:
    parameters:
      region:
        type: string
        description: A default AWS region name
        default: us-east-1
    steps:
      - aws-cli/setup
      - run:
          name: aws-init
          command: |
            echo 'AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-<< parameters.region >>}' >> $BASH_ENV
            echo 'AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)' >> $BASH_ENV
            echo 'AWS_ECR_ENDPOINT="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"' >> $BASH_ENV
            source $BASH_ENV
  ecr-login:
    steps:
      - run:
          name: ecr docker login
          command: |
            aws_version=`aws --version 2>&1`
            if echo $aws_version | grep 'aws-cli/1' > /dev/null; then
              echo "aws-cli v1 detected. Logging in to ecr docker..."
              `aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION}`
            elif echo $aws_version | grep 'aws-cli/2' > /dev/null; then
              echo "aws-cli v2 detected. Logging in to ecr docker..."
              aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin "${AWS_ECR_ENDPOINT}"
            else
              echo "Can't detect the version of awscli being used..."
              exit 1
            fi
  ecr-image-build:
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      image_name:
        type: string
    steps:
      - run:
          name: Build << parameters.dockerfile >> docker image
          command: |
            docker image build . -f "<< parameters.dockerfile >>" --tag "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}"
  ecr-image-push:
    parameters:
      image_name:
        type: string
    steps:
    - deploy:
        name: docker image push
        command: |
          docker image tag "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}" \
                           "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_BRANCH:-${CIRCLE_TAG:-NO_BRANCH_OR_TAG_CONFIGURED_BY_CIRCLE}}"
          docker image push "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}"
          echo "Successfully pushed image: ${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_SHA1}"
          docker image push "${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_BRANCH:-${CIRCLE_TAG:-NO_BRANCH_OR_TAG_CONFIGURED_BY_CIRCLE}}"
          echo "Successfully pushed image: ${AWS_ECR_ENDPOINT}/<< parameters.image_name >>:${CIRCLE_BRANCH:-${CIRCLE_TAG:-NO_BRANCH_OR_TAG_CONFIGURED_BY_CIRCLE}}"
  terraform-init:
    parameters:
      folder:
        type: string
        description: A relative path from the project root in which to perform terrafrom init
    steps:
      - deploy:
          name: Terraform Init
          command: |
            throw_error() {
              echo $1
              return 1
            }
            cd << parameters.folder >> || throw_error  "FATAL: command 'cd << parameters.folder >>' has failed"
            terraform -version || throw_error "FATAL: command 'terraform -version' has failed"
            terraform init -input=false || throw_error "FATAL: command 'terraform init -input-false' has failed"
            echo "image_tag = \"$CIRCLE_SHA1\"" >> ./build.auto.tfvars
  terraform-plan:
    parameters:
      folder:
        type: string
        description: A relative path from the project root in which to perform terrafrom plan
      workspace:
        type: string
        description: A workspace in which to perform terraform plan
    steps:
      - deploy:
          name: Terraform Plan
          command: |
            throw_error() {
              echo $1
              return 1
            }
            cd << parameters.folder >> || throw_error "FATAL: command 'cd << parameters.folder >>' has failed"
            terraform workspace select << parameters.workspace >> || throw_error "FATAL: command 'terraform workspace select << parameters.workspace >>' has failed"
            terraform plan -out=<< parameters.workspace >>.tfplan -input=false || throw_error "FATAL: command 'terraform plan -out=<< parameters.workspace >>.tfplan -input=false' has failed"
  terraform-apply:
    parameters:
      folder:
        type: string
        description: A relative path from the project root in which to perform terrafrom apply
      workspace:
        type: string
        description: A workspace in which to perform terraform apply
    steps:
      - deploy:
          name: Terraform Apply
          command: |
            throw_error() {
              echo $1
              return 1
            }
            cd << parameters.folder >> || ( echo "directory << parameters.folder >> does not exist"; exit 1 )
            terraform workspace select << parameters.workspace >> || ( echo "terraform workspace select << parameters.workspace >> has failed"; exit 1 )
            terraform apply -input=false << parameters.workspace >>.tfplan || ( echo "terraform apply has failed"; exit 1 )


jobs:
  rubocop:
    executor: ruby
    steps:
      - install-system-dependencies
      - install-and-cache-gems
      - ruby/rubocop-check

  rspec:
    executor: ruby-with-postgres
    steps:
      - install-system-dependencies
      - install-and-cache-gems
      - migrate-db
      - run:
          name: Run rspec
          command: bundle exec rspec --format progress
  rspec-docker:
    executor: ruby
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Build rspec in Docker container
        command: |
          git describe --long > REVISION || touch REVISION
          cat REVISION
          docker-compose -f docker/docker-compose-test.yml build rspec
    - run:
        name: Run rspec in Docker container
        command: |
          docker-compose -f docker/docker-compose-test.yml run rspec
  teaspoonJS:
    executor: ruby
    steps:
      - install-system-dependencies
      - install-and-cache-gems
      - run:
          name: teaspoon
          command: |
            bundle exec teaspoon --coverage=default
  jsHint:
    executor: ruby
    steps:
      - install-system-dependencies
      - install-and-cache-gems
      - run:
          name: jshint
          command: |
            bundle exec rake jshint

  brakeman:
    executor: ruby
    steps:
      - install-system-dependencies
      - install-and-cache-gems
      - run:
          name: brakeman
          parallel: true
          command: |
            gem install --no-document brakeman
            brakeman --exit-on-warn .
  build-containers:
    executor: base
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - aws-init
      - ecr-login
      - build-containers
      - push-containers
  deploy-messaging:
    executor: base
    parameters:
      workspace:
        type: string
        description: A terraform workspace name
    steps:
      - checkout
      - aws-init
      - terraform/install:
          terraform_version: 1.0.0
      - terraform-init:
          folder: terraform
      - terraform-plan:
          folder: terraform
          workspace: << parameters.workspace >>
      - terraform-apply:
          folder: terraform
          workspace: << parameters.workspace >>

workflows:
  version: 2
  test:
    jobs:
      - rubocop
      - rspec
      - rspec-docker
      - teaspoonJS
      - jsHint
      - brakeman
  deploy:
    jobs:
      - build-containers:
          context: certify-lower
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
              - build-lower
              - /^v[0-9]+(\.[0-9]+)(\.[0-9]+)*/
      - deploy-messaging:
          name: deploy-webmap-demo
          context: certify-lower
          workspace: demo
          requires:
            - build-containers
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
              - build-lower
              - /^v[0-9]+(\.[0-9]+)(\.[0-9]+)*/

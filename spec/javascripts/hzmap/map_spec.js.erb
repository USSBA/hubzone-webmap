//= require hzmap/map
//= require hzmap/map-utils
//= require hzmap
/* jshint unused: false */
/* jshint undef: false */

describe ('Testing map operations', function() {
  beforeEach(function(){
    google = HZSpecHelper.google;
    HZApp.map = new google.maps.Map();
    HZSpecHelper.mockPage.build();
  });

  afterEach(function(){
    HZApp.map = {};
    HZSpecHelper.mockPage.destroy();
  });

  it("should create a new Google map", function() {
    spyOn(google.maps, 'Map').and.returnValue(HZApp.map);
    spyOn(google.maps.event, 'addListenerOnce');
    spyOn(google.maps.event, 'addListener');
    spyOn(google.maps.places, 'Autocomplete');
    spyOn(google.maps, 'StyledMapType');
    spyOn(HZApp.map.mapTypes, 'set');
    spyOn(HZApp.map, 'setOptions');

    spyOn(HZApp.GeoLocation, 'getUserLocation');
    spyOn(HZApp.Autocomplete, 'createAutocomplete');
    spyOn(HZApp.Autocomplete, 'createListener');
    spyOn(HZApp.Legend, 'buildLegend');
    spyOn(HZApp.WMTSUtils, 'initializeTiles');
    spyOn(HZApp.WMTSUtils, 'addClickListeners');
    spyOn(HZApp.MapUtils, 'catchClearSearch');

    HZApp.map.controls[google.maps.ControlPosition.LEFT_BOTTOM] = [];
    HZApp.map.controls[google.maps.ControlPosition.TOP_RIGHT] = [];
    HZApp.map.controls[google.maps.ControlPosition.RIGHT_BOTTOM] = [];

    expect(initMap()).not.toBe(null);
    expect(google.maps.Map.calls.count()).toEqual(1);
    expect(google.maps.event.addListenerOnce.calls.count()).toEqual(1);
    expect(google.maps.event.addListener.calls.count()).toEqual(1);
    expect(google.maps.StyledMapType.calls.count()).toEqual(1);
    expect(HZApp.map.mapTypes.set.calls.count()).toEqual(1);
    expect(HZApp.map.setOptions.calls.count()).toEqual(1);
    expect(HZApp.GeoLocation.getUserLocation.calls.count()).toEqual(1);
    expect(HZApp.Autocomplete.createAutocomplete.calls.count()).toEqual(1);
    expect(HZApp.Autocomplete.createListener.calls.count()).toEqual(1);
    expect(HZApp.Legend.buildLegend.calls.count()).toEqual(1);
    expect(HZApp.WMTSUtils.initializeTiles.calls.count()).toEqual(1);
    expect(HZApp.WMTSUtils.addClickListeners.calls.count()).toEqual(1);
    expect(HZApp.MapUtils.catchClearSearch.calls.count()).toEqual(1);
  });

  describe("should parse a viewport to LatLngBounds", function(){
    it(" and send it to fitBounds if zoom is < 15", function(){
      spyOn(HZApp.MapUtils, 'getBoundsZoomLevel').and.callThrough();
      spyOn(google.maps, 'LatLngBounds');
      spyOn(google.maps, 'LatLng');
      spyOn(HZApp.map, 'fitBounds');
      spyOn(HZApp.MapUtils, 'getMapDims').and.returnValue({height: 600, width: 1200});

      var geocodeLocation = {
        location: HZSpecHelper.markerLocation,
        viewport: {
          northeast: {
            lat: 49.38,
            lng: -66.94
          },
          southwest: {
            lat: 25.82,
            lng: -124.39
          }
        }
      };

      HZApp.MapUtils.jumpToLocation(geocodeLocation);
      expect(google.maps.LatLngBounds.calls.count()).toEqual(1);
      expect(google.maps.LatLng.calls.count()).toEqual(3);
      expect(HZApp.map.fitBounds.calls.count()).toEqual(1);
    });

    it(" and send it to panAndZoom if zoom is > 15", function(){
      spyOn(HZApp.MapUtils, 'getBoundsZoomLevel').and.callThrough();
      spyOn(google.maps, 'LatLngBounds');
      spyOn(google.maps, 'LatLng');
      spyOn(HZApp.map, 'fitBounds');
      spyOn(HZApp.MapUtils, 'panAndZoom');
      spyOn(HZApp.MapUtils, 'getMapDims').and.returnValue({height: 600, width: 1200});

      var geocodeLocation = {
        location: HZSpecHelper.markerLocation,
        viewport: {
          northeast: {
            lat: 39.29024048029149,
            lng: -76.60564721970849
          },
          southwest: {
            lat: 39.2875425197085,
            lng: -76.6083451802915
          }
        }
      };

      HZApp.MapUtils.jumpToLocation(geocodeLocation);
      expect(google.maps.LatLngBounds.calls.count()).toEqual(0);
      expect(google.maps.LatLng.calls.count()).toEqual(1);
      expect(HZApp.map.fitBounds.calls.count()).toEqual(0);
      expect(HZApp.MapUtils.panAndZoom.calls.count()).toEqual(1);
    });

    it(" handles request to other side of date line correctly", function(){
      spyOn(HZApp.MapUtils, 'getBoundsZoomLevel').and.callThrough();
      spyOn(google.maps, 'LatLngBounds');
      spyOn(google.maps, 'LatLng');
      spyOn(HZApp.map, 'fitBounds');
      spyOn(HZApp.MapUtils, 'panAndZoom');
      spyOn(HZApp.MapUtils, 'getMapDims').and.returnValue({height: 600, width: 1200});

      var geocodeLocation = {
        location: HZSpecHelper.markerLocation,
        viewport: {
          northeast: {
            lat: 54.00378357900692,
            lng: -179.9876618385315
          },
          southwest: {
            lat: 53.996216077069924,
            lng: 179.98766183
          }
        }
      };

      HZApp.MapUtils.jumpToLocation(geocodeLocation);
      expect(google.maps.LatLngBounds.calls.count()).toEqual(0);
      expect(google.maps.LatLng.calls.count()).toEqual(1);
      expect(HZApp.map.fitBounds.calls.count()).toEqual(0);
      expect(HZApp.MapUtils.panAndZoom.calls.count()).toEqual(1);
    });

    it("should get the correct dims of an element", function(){
      var height = 100;
      var width = 200;
      $('body').append('<div id="mockEl"></div>');
      var mockEl = $('#mockEl');
      mockEl.height(height);
      mockEl.width(width);
      var dims = HZApp.MapUtils.getMapDims(mockEl);
      expect(dims.height).toEqual(height);
      expect(dims.width).toEqual(width);
    });

    it("should pan and center the map", function(){
      spyOn(HZApp.map, 'setCenter');
      spyOn(HZApp.map, 'setZoom');

      HZApp.MapUtils.panAndZoom({lat: 0, lng: 0}, 10);
      expect(HZApp.map.setCenter.calls.count()).toEqual(1);
      expect(HZApp.map.setZoom.calls.count()).toEqual(1);
    });

  });

  it("should pass over a geocodeLocation that does not contain a viewport, doing nothing", function(){
    spyOn(HZApp.map, 'fitBounds');

    var geocodeLocationNoViewport = {
      location: HZSpecHelper.markerLocation
    };

    HZApp.MapUtils.jumpToLocation(geocodeLocationNoViewport);
    expect(HZApp.map.fitBounds.calls.count()).toEqual(0);
  });

  it("should return a correctly formatted url request on map click", function(){
    var mapClick = {
      latLng: {
        lat: function(){
          return HZSpecHelper.markerLocation.lat;
        },
        lng: function(){
          return HZSpecHelper.markerLocation.lng;
        }
      }
    };

    var date = HZApp.MapUtils.parseDate(new Date());
    var latlngUrl = '<%= search_path %>?latlng=' + mapClick.latLng.lat() + ',' + mapClick.latLng.lng() +
                    '&query_date=' + date +
                    '&locale=en';
    var clickUrl = HZApp.MapUtils.catchMapClick(mapClick);
    expect(clickUrl).toEqual(latlngUrl);
  });

  it("should update the url hash on map click", function(){
    spyOn(HZApp.Router, 'setHash');
    spyOn(HZApp.Router, 'setCenterAndZoomHash').and.callThrough();

    var mapClick = {
      latLng: {
        lat: function(){
          return HZSpecHelper.markerLocation.lat;
        },
        lng: function(){
          return HZSpecHelper.markerLocation.lng;
        }
      }
    };

    HZApp.MapUtils.catchMapClick(mapClick);
    expect(HZApp.Router.setHash.calls.count()).toEqual(3); //once each for latlng, center, zoom
    expect(HZApp.Router.setCenterAndZoomHash.calls.count()).toEqual(1);
  });

  it("should call to the update map location hash when called", function(){
    spyOn(HZApp.Router, 'setHash');
    spyOn(HZApp.Router, 'setCenterAndZoomHash').and.callThrough();
    HZApp.MapUtils.updateMapLocation();
    expect(HZApp.Router.setHash.calls.count()).toEqual(2); //once each for center, zoom
    expect(HZApp.Router.setCenterAndZoomHash.calls.count()).toEqual(1);
  });

  it("should parse single digit dates correctly", function(){
    var date = HZApp.MapUtils.parseDate(new Date('1/1/2016'));
    expect(date).toEqual('2016-01-01');
  });

  it("should parse double digit dates correctly", function(){
    var date = HZApp.MapUtils.parseDate(new Date('10/11/2016'));
    expect(date).toEqual('2016-10-11');
  });

  it("should do nothing if the maptype is not present", function(){
    var badMapType = 'banana';
    var newName = 'bar';
    HZApp.MapUtils.customMapTypeName({mapType: badMapType, newName: newName});
    expect(HZApp.map.mapTypes[badMapType]).toBe(undefined);
  });

  it("should set the maptype name property", function(){
    HZApp.map.mapTypes.foo = {};
    var newName = 'bar';
    var returnVal = HZApp.MapUtils.customMapTypeName({mapType:'foo', newName: newName});
    expect(HZApp.map.mapTypes.foo.name).toEqual(newName);
  });

  it("should call the mapType name updater and activate the mapType option", function(){
    spyOn(HZApp.MapUtils, 'customMapTypeName');
    spyOn(HZApp.map, 'setOptions');

    HZApp.MapUtils.mapNameUpdates = [
      {mapType:'foo', newName: 'foo-foo'},
      {mapType:'bar', newName: 'bar-bar'}
    ];

    HZApp.MapUtils.updateMapTypeNames(HZApp.map);
    expect(HZApp.MapUtils.customMapTypeName.calls.count()).toEqual(HZApp.MapUtils.mapNameUpdates.length);
    expect(HZApp.map.setOptions.calls.count()).toEqual(1);
  });

  it("should bind a listener to handle clearing search + reset map", function(){
    spyOn(HZApp.MapUtils, 'resetMap');

    HZApp.MapUtils.catchClearSearch('button.clear-search');
    $('button.clear-search').click();

    expect(HZApp.MapUtils.resetMap.calls.count()).toEqual(1);
  });

  describe("it should reset the map", function() {
    beforeEach(function(){
      HZApp.Markers.hzQueryMarker = new HZApp.Constructors.HubzoneMapMarker({
        icon: '',
        scaledSize: 40
      });
      HZApp.Markers.hzUserLocation = new HZApp.Constructors.HubzoneMapMarker({
        icon: '',
        scaledSize: 17
      });
      HZApp.SidebarUtils.buildSidebar();
      sidebar = HZApp.SidebarUtils.sidebar;
    });

    it("should handle resetting the map", function(){
      spyOn(HZApp.Markers.hzQueryMarker, 'updateMarkers');
      spyOn(HZApp.SidebarUtils.sidebar, 'close');
      spyOn(HZApp.SidebarUtils.sidebar, 'clear');

      HZApp.MapUtils.resetMap();

      expect(HZApp.Markers.hzQueryMarker.updateMarkers.calls.count()).toEqual(1);
      expect(HZApp.SidebarUtils.sidebar.close.calls.count()).toEqual(1);
      expect(HZApp.SidebarUtils.sidebar.clear.calls.count()).toEqual(1);
    });
  });

  describe("the hzBaseMapStyle style parser should produce the correct results", function(){
    it("should correctly parse a google map tile style into a static map style", function(){
      var mockStyles = [
        {
          "featureType": "water",
          "elementType": "labels.text.fill",
          "stylers": [
            {
                "color": "#9e9e9e"
            }
          ]
        }
      ];

      var staticStyle = HZApp.MapUtils.parseStyleToStaticUrl(mockStyles);
      var expectedStyle = encodeURI("&style=feature:water|element:labels.text.fill|color:0x9e9e9e");
      expect(staticStyle).toEqual(expectedStyle);
    });

    it("should use the HZApp.Styles.hzBaseMapStyle", function(){
      var staticStyle = HZApp.MapUtils.parseStyleToStaticUrl();
      var expectedStyle = encodeURI("style=feature:all|element:geometry|color:0xf5f5f5");
      expect(staticStyle.includes(expectedStyle)).toBe(true);
    });
  });
});

//= require hzmap/map
//= require hzmap/map-utils
/* jshint unused: false */
/* jshint undef: false */

describe ('Testing map operations', function() {
  beforeEach(function(){
    google = HZSpecHelper.google;
    HZApp.map = new google.maps.Map();
  });

  afterEach(function(){
    HZApp.map = {};
  });

  it("should create a new Google map", function() {
    spyOn(google.maps, 'Map').and.returnValue(HZApp.map);
    spyOn(google.maps.event, 'addListener');
    spyOn(google.maps.places, 'Autocomplete');
    spyOn(google.maps, 'StyledMapType');
    spyOn(HZApp.map.mapTypes, 'set');

    spyOn(HZApp.GeoLocation, 'getUserLocation');
    spyOn(HZApp.Autocomplete, 'createAutocomplete');
    spyOn(HZApp.Autocomplete, 'createListener');
    spyOn(HZApp.Legend, 'buildLegend');
    spyOn(HZApp.WMTSUtils, 'initializeTiles');
    spyOn(HZApp.WMTSUtils, 'addClickListeners');

    HZApp.map.controls[google.maps.ControlPosition.LEFT_BOTTOM] = [];
    HZApp.map.controls[google.maps.ControlPosition.TOP_RIGHT] = [];
    HZApp.map.controls[google.maps.ControlPosition.RIGHT_BOTTOM] = [];

    expect(initMap()).not.toBe(null);
    expect(google.maps.Map.calls.count()).toEqual(1);
    expect(google.maps.StyledMapType.calls.count()).toEqual(1);
    expect(HZApp.map.mapTypes.set.calls.count()).toEqual(1);
    expect(HZApp.GeoLocation.getUserLocation.calls.count()).toEqual(1);
    expect(HZApp.Autocomplete.createAutocomplete.calls.count()).toEqual(1);
    expect(HZApp.Autocomplete.createListener.calls.count()).toEqual(1);
    expect(HZApp.Legend.buildLegend.calls.count()).toEqual(1);
    expect(HZApp.WMTSUtils.initializeTiles.calls.count()).toEqual(1);
    expect(HZApp.WMTSUtils.addClickListeners.calls.count()).toEqual(1);


  });

  it("should parse a viewport to LatLngBounds and send it to fitBounds", function(){
    spyOn(google.maps, 'LatLngBounds');
    spyOn(google.maps, 'LatLng');
    spyOn(HZApp.map, 'fitBounds');

    var geocodeLocation = {
      location: HZSpecHelper.markerLocation,
      viewport: {
        northeast: {
          lat: 39.29024048029149,
          lng: -76.60564721970849
        },
        southwest: {
          lat: 39.2875425197085,
          lng: -76.6083451802915
        }
      }
    };

    HZApp.MapUtils.jumpToLocation(geocodeLocation);
    expect(google.maps.LatLngBounds.calls.count()).toEqual(1);
    expect(google.maps.LatLng.calls.count()).toEqual(2);
    expect(HZApp.map.fitBounds.calls.count()).toEqual(1);
  });

  it("should pass over a geocodeLocation that does not contain a viewport, doing nothing", function(){
    spyOn(HZApp.map, 'fitBounds');

    var geocodeLocationNoViewport = {
      location: HZSpecHelper.markerLocation
    };

    HZApp.MapUtils.jumpToLocation(geocodeLocationNoViewport);
    expect(HZApp.map.fitBounds.calls.count()).toEqual(0);
  });

  it("should return a correctly formatted url request on map click", function(){
    var mapClick = {
      latLng: {
        lat: function(){
          return HZSpecHelper.markerLocation.lat;
        },
        lng: function(){
          return HZSpecHelper.markerLocation.lng;
        }
      }
    };

    var date = HZApp.MapUtils.parseDate(new Date());
    var latlngUrl = '<%= search_path %>?latlng=' + mapClick.latLng.lat() + ',' + mapClick.latLng.lng() +
                    '&query_date=' + date +
                    '&locale=en';
    var clickUrl = HZApp.MapUtils.catchMapClick(mapClick);
    expect(clickUrl).toEqual(latlngUrl);
  });

  it("should parse single digit dates correctly", function(){
    var date = HZApp.MapUtils.parseDate(new Date('1/1/2016'));
    expect(date).toEqual('2016-01-01');
  });

  it("should parse double digit dates correctly", function(){
    var date = HZApp.MapUtils.parseDate(new Date('10/11/2016'));
    expect(date).toEqual('2016-10-11');
  });

});
